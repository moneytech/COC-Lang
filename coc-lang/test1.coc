typedef U = IntOrPtr

func example_test(): int {
    return fact_rec(10) == fact_iter(10);
}

union IntOrPtr {
    i: int;
    p: int*;
}

func is_even(digit: int): int {
    b := 0;
    switch (digit) {
        case 0:
        case 2:
        case 4:
        case 6:
        case 8:
            b = 1;
    }
    return b;
}

// func f() {
//     u1 := IntOrPtr{i = 42};
//     u2 := IntOrPtr{p = (:int*)42};
//     u1.i = 0;
//     u2.p = (:int*)0;
// }

var i: int

struct Vector {
    x, y: int;
}

func fact_iter(n: int): int {
    r := 1;
    for (i := 2; i <= n; i++) {
        r *= i;
    }
    return r;
}

func fact_rec(n: int): int {
    if (n == 0) {
        return 1;
    } 
    else {
        return n * fact_rec(n-1);
    }
}

const n = 1 + sizeof(p)

var p: T*

struct T {
    a: int[n];
}

func main(argc: int, argv: char**): int {
    b := example_test();
    puts("Hello, world!");
    return 0;
}